
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserProfile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserProfile
 * 
 */
export type UserProfileModel = runtime.Types.Result.DefaultSelection<Prisma.$UserProfilePayload>

export type AggregateUserProfile = {
  _count: UserProfileCountAggregateOutputType | null
  _avg: UserProfileAvgAggregateOutputType | null
  _sum: UserProfileSumAggregateOutputType | null
  _min: UserProfileMinAggregateOutputType | null
  _max: UserProfileMaxAggregateOutputType | null
}

export type UserProfileAvgAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type UserProfileSumAggregateOutputType = {
  id: number | null
  userId: number | null
}

export type UserProfileMinAggregateOutputType = {
  id: number | null
  year_level: string | null
  gender: $Enums.Gender | null
  hobby_1: string | null
  hobby_2: string | null
  not_good: string | null
  bio: string | null
  userId: number | null
}

export type UserProfileMaxAggregateOutputType = {
  id: number | null
  year_level: string | null
  gender: $Enums.Gender | null
  hobby_1: string | null
  hobby_2: string | null
  not_good: string | null
  bio: string | null
  userId: number | null
}

export type UserProfileCountAggregateOutputType = {
  id: number
  year_level: number
  gender: number
  hobby_1: number
  hobby_2: number
  not_good: number
  bio: number
  userId: number
  _all: number
}


export type UserProfileAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type UserProfileSumAggregateInputType = {
  id?: true
  userId?: true
}

export type UserProfileMinAggregateInputType = {
  id?: true
  year_level?: true
  gender?: true
  hobby_1?: true
  hobby_2?: true
  not_good?: true
  bio?: true
  userId?: true
}

export type UserProfileMaxAggregateInputType = {
  id?: true
  year_level?: true
  gender?: true
  hobby_1?: true
  hobby_2?: true
  not_good?: true
  bio?: true
  userId?: true
}

export type UserProfileCountAggregateInputType = {
  id?: true
  year_level?: true
  gender?: true
  hobby_1?: true
  hobby_2?: true
  not_good?: true
  bio?: true
  userId?: true
  _all?: true
}

export type UserProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserProfile to aggregate.
   */
  where?: Prisma.UserProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProfiles to fetch.
   */
  orderBy?: Prisma.UserProfileOrderByWithRelationInput | Prisma.UserProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserProfiles
  **/
  _count?: true | UserProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserProfileAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserProfileSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserProfileMaxAggregateInputType
}

export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateUserProfile[P]>
}




export type UserProfileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserProfileWhereInput
  orderBy?: Prisma.UserProfileOrderByWithAggregationInput | Prisma.UserProfileOrderByWithAggregationInput[]
  by: Prisma.UserProfileScalarFieldEnum[] | Prisma.UserProfileScalarFieldEnum
  having?: Prisma.UserProfileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserProfileCountAggregateInputType | true
  _avg?: UserProfileAvgAggregateInputType
  _sum?: UserProfileSumAggregateInputType
  _min?: UserProfileMinAggregateInputType
  _max?: UserProfileMaxAggregateInputType
}

export type UserProfileGroupByOutputType = {
  id: number
  year_level: string
  gender: $Enums.Gender
  hobby_1: string
  hobby_2: string
  not_good: string
  bio: string
  userId: number
  _count: UserProfileCountAggregateOutputType | null
  _avg: UserProfileAvgAggregateOutputType | null
  _sum: UserProfileSumAggregateOutputType | null
  _min: UserProfileMinAggregateOutputType | null
  _max: UserProfileMaxAggregateOutputType | null
}

type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserProfileGroupByOutputType[P]>
      }
    >
  >



export type UserProfileWhereInput = {
  AND?: Prisma.UserProfileWhereInput | Prisma.UserProfileWhereInput[]
  OR?: Prisma.UserProfileWhereInput[]
  NOT?: Prisma.UserProfileWhereInput | Prisma.UserProfileWhereInput[]
  id?: Prisma.IntFilter<"UserProfile"> | number
  year_level?: Prisma.StringFilter<"UserProfile"> | string
  gender?: Prisma.EnumGenderFilter<"UserProfile"> | $Enums.Gender
  hobby_1?: Prisma.StringFilter<"UserProfile"> | string
  hobby_2?: Prisma.StringFilter<"UserProfile"> | string
  not_good?: Prisma.StringFilter<"UserProfile"> | string
  bio?: Prisma.StringFilter<"UserProfile"> | string
  userId?: Prisma.IntFilter<"UserProfile"> | number
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserProfileOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  year_level?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  hobby_1?: Prisma.SortOrder
  hobby_2?: Prisma.SortOrder
  not_good?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId?: number
  AND?: Prisma.UserProfileWhereInput | Prisma.UserProfileWhereInput[]
  OR?: Prisma.UserProfileWhereInput[]
  NOT?: Prisma.UserProfileWhereInput | Prisma.UserProfileWhereInput[]
  year_level?: Prisma.StringFilter<"UserProfile"> | string
  gender?: Prisma.EnumGenderFilter<"UserProfile"> | $Enums.Gender
  hobby_1?: Prisma.StringFilter<"UserProfile"> | string
  hobby_2?: Prisma.StringFilter<"UserProfile"> | string
  not_good?: Prisma.StringFilter<"UserProfile"> | string
  bio?: Prisma.StringFilter<"UserProfile"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type UserProfileOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  year_level?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  hobby_1?: Prisma.SortOrder
  hobby_2?: Prisma.SortOrder
  not_good?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.UserProfileCountOrderByAggregateInput
  _avg?: Prisma.UserProfileAvgOrderByAggregateInput
  _max?: Prisma.UserProfileMaxOrderByAggregateInput
  _min?: Prisma.UserProfileMinOrderByAggregateInput
  _sum?: Prisma.UserProfileSumOrderByAggregateInput
}

export type UserProfileScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserProfileScalarWhereWithAggregatesInput | Prisma.UserProfileScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserProfileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserProfileScalarWhereWithAggregatesInput | Prisma.UserProfileScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserProfile"> | number
  year_level?: Prisma.StringWithAggregatesFilter<"UserProfile"> | string
  gender?: Prisma.EnumGenderWithAggregatesFilter<"UserProfile"> | $Enums.Gender
  hobby_1?: Prisma.StringWithAggregatesFilter<"UserProfile"> | string
  hobby_2?: Prisma.StringWithAggregatesFilter<"UserProfile"> | string
  not_good?: Prisma.StringWithAggregatesFilter<"UserProfile"> | string
  bio?: Prisma.StringWithAggregatesFilter<"UserProfile"> | string
  userId?: Prisma.IntWithAggregatesFilter<"UserProfile"> | number
}

export type UserProfileCreateInput = {
  year_level: string
  gender: $Enums.Gender
  hobby_1: string
  hobby_2: string
  not_good: string
  bio: string
  user: Prisma.UserCreateNestedOneWithoutProfileInput
}

export type UserProfileUncheckedCreateInput = {
  id?: number
  year_level: string
  gender: $Enums.Gender
  hobby_1: string
  hobby_2: string
  not_good: string
  bio: string
  userId: number
}

export type UserProfileUpdateInput = {
  year_level?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  hobby_1?: Prisma.StringFieldUpdateOperationsInput | string
  hobby_2?: Prisma.StringFieldUpdateOperationsInput | string
  not_good?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutProfileNestedInput
}

export type UserProfileUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year_level?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  hobby_1?: Prisma.StringFieldUpdateOperationsInput | string
  hobby_2?: Prisma.StringFieldUpdateOperationsInput | string
  not_good?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserProfileCreateManyInput = {
  id?: number
  year_level: string
  gender: $Enums.Gender
  hobby_1: string
  hobby_2: string
  not_good: string
  bio: string
  userId: number
}

export type UserProfileUpdateManyMutationInput = {
  year_level?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  hobby_1?: Prisma.StringFieldUpdateOperationsInput | string
  hobby_2?: Prisma.StringFieldUpdateOperationsInput | string
  not_good?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserProfileUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year_level?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  hobby_1?: Prisma.StringFieldUpdateOperationsInput | string
  hobby_2?: Prisma.StringFieldUpdateOperationsInput | string
  not_good?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type UserProfileNullableScalarRelationFilter = {
  is?: Prisma.UserProfileWhereInput | null
  isNot?: Prisma.UserProfileWhereInput | null
}

export type UserProfileCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year_level?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  hobby_1?: Prisma.SortOrder
  hobby_2?: Prisma.SortOrder
  not_good?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserProfileAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserProfileMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year_level?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  hobby_1?: Prisma.SortOrder
  hobby_2?: Prisma.SortOrder
  not_good?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserProfileMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year_level?: Prisma.SortOrder
  gender?: Prisma.SortOrder
  hobby_1?: Prisma.SortOrder
  hobby_2?: Prisma.SortOrder
  not_good?: Prisma.SortOrder
  bio?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserProfileSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type UserProfileCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserProfileCreateWithoutUserInput, Prisma.UserProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.UserProfileWhereUniqueInput
}

export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserProfileCreateWithoutUserInput, Prisma.UserProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserProfileCreateOrConnectWithoutUserInput
  connect?: Prisma.UserProfileWhereUniqueInput
}

export type UserProfileUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserProfileCreateWithoutUserInput, Prisma.UserProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserProfileUpsertWithoutUserInput
  disconnect?: Prisma.UserProfileWhereInput | boolean
  delete?: Prisma.UserProfileWhereInput | boolean
  connect?: Prisma.UserProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserProfileUpdateToOneWithWhereWithoutUserInput, Prisma.UserProfileUpdateWithoutUserInput>, Prisma.UserProfileUncheckedUpdateWithoutUserInput>
}

export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserProfileCreateWithoutUserInput, Prisma.UserProfileUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserProfileCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserProfileUpsertWithoutUserInput
  disconnect?: Prisma.UserProfileWhereInput | boolean
  delete?: Prisma.UserProfileWhereInput | boolean
  connect?: Prisma.UserProfileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserProfileUpdateToOneWithWhereWithoutUserInput, Prisma.UserProfileUpdateWithoutUserInput>, Prisma.UserProfileUncheckedUpdateWithoutUserInput>
}

export type EnumGenderFieldUpdateOperationsInput = {
  set?: $Enums.Gender
}

export type UserProfileCreateWithoutUserInput = {
  year_level: string
  gender: $Enums.Gender
  hobby_1: string
  hobby_2: string
  not_good: string
  bio: string
}

export type UserProfileUncheckedCreateWithoutUserInput = {
  id?: number
  year_level: string
  gender: $Enums.Gender
  hobby_1: string
  hobby_2: string
  not_good: string
  bio: string
}

export type UserProfileCreateOrConnectWithoutUserInput = {
  where: Prisma.UserProfileWhereUniqueInput
  create: Prisma.XOR<Prisma.UserProfileCreateWithoutUserInput, Prisma.UserProfileUncheckedCreateWithoutUserInput>
}

export type UserProfileUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserProfileUpdateWithoutUserInput, Prisma.UserProfileUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserProfileCreateWithoutUserInput, Prisma.UserProfileUncheckedCreateWithoutUserInput>
  where?: Prisma.UserProfileWhereInput
}

export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserProfileWhereInput
  data: Prisma.XOR<Prisma.UserProfileUpdateWithoutUserInput, Prisma.UserProfileUncheckedUpdateWithoutUserInput>
}

export type UserProfileUpdateWithoutUserInput = {
  year_level?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  hobby_1?: Prisma.StringFieldUpdateOperationsInput | string
  hobby_2?: Prisma.StringFieldUpdateOperationsInput | string
  not_good?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserProfileUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  year_level?: Prisma.StringFieldUpdateOperationsInput | string
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  hobby_1?: Prisma.StringFieldUpdateOperationsInput | string
  hobby_2?: Prisma.StringFieldUpdateOperationsInput | string
  not_good?: Prisma.StringFieldUpdateOperationsInput | string
  bio?: Prisma.StringFieldUpdateOperationsInput | string
}



export type UserProfileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year_level?: boolean
  gender?: boolean
  hobby_1?: boolean
  hobby_2?: boolean
  not_good?: boolean
  bio?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userProfile"]>

export type UserProfileSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year_level?: boolean
  gender?: boolean
  hobby_1?: boolean
  hobby_2?: boolean
  not_good?: boolean
  bio?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userProfile"]>

export type UserProfileSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year_level?: boolean
  gender?: boolean
  hobby_1?: boolean
  hobby_2?: boolean
  not_good?: boolean
  bio?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userProfile"]>

export type UserProfileSelectScalar = {
  id?: boolean
  year_level?: boolean
  gender?: boolean
  hobby_1?: boolean
  hobby_2?: boolean
  not_good?: boolean
  bio?: boolean
  userId?: boolean
}

export type UserProfileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "year_level" | "gender" | "hobby_1" | "hobby_2" | "not_good" | "bio" | "userId", ExtArgs["result"]["userProfile"]>
export type UserProfileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserProfileIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserProfilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserProfile"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    year_level: string
    gender: $Enums.Gender
    hobby_1: string
    hobby_2: string
    not_good: string
    bio: string
    userId: number
  }, ExtArgs["result"]["userProfile"]>
  composites: {}
}

export type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserProfilePayload, S>

export type UserProfileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserProfileCountAggregateInputType | true
  }

export interface UserProfileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
  /**
   * Find zero or one UserProfile that matches the filter.
   * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
   * @example
   * // Get one UserProfile
   * const userProfile = await prisma.userProfile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserProfileFindUniqueArgs>(args: Prisma.SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
   * @example
   * // Get one UserProfile
   * const userProfile = await prisma.userProfile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserProfile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
   * @example
   * // Get one UserProfile
   * const userProfile = await prisma.userProfile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserProfileFindFirstArgs>(args?: Prisma.SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserProfile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
   * @example
   * // Get one UserProfile
   * const userProfile = await prisma.userProfile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserProfiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserProfiles
   * const userProfiles = await prisma.userProfile.findMany()
   * 
   * // Get first 10 UserProfiles
   * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserProfileFindManyArgs>(args?: Prisma.SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserProfile.
   * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
   * @example
   * // Create one UserProfile
   * const UserProfile = await prisma.userProfile.create({
   *   data: {
   *     // ... data to create a UserProfile
   *   }
   * })
   * 
   */
  create<T extends UserProfileCreateArgs>(args: Prisma.SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserProfiles.
   * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
   * @example
   * // Create many UserProfiles
   * const userProfile = await prisma.userProfile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserProfileCreateManyArgs>(args?: Prisma.SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserProfiles and returns the data saved in the database.
   * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
   * @example
   * // Create many UserProfiles
   * const userProfile = await prisma.userProfile.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserProfiles and only return the `id`
   * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserProfile.
   * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
   * @example
   * // Delete one UserProfile
   * const UserProfile = await prisma.userProfile.delete({
   *   where: {
   *     // ... filter to delete one UserProfile
   *   }
   * })
   * 
   */
  delete<T extends UserProfileDeleteArgs>(args: Prisma.SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserProfile.
   * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
   * @example
   * // Update one UserProfile
   * const userProfile = await prisma.userProfile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserProfileUpdateArgs>(args: Prisma.SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserProfiles.
   * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
   * @example
   * // Delete a few UserProfiles
   * const { count } = await prisma.userProfile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserProfileDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserProfiles
   * const userProfile = await prisma.userProfile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserProfileUpdateManyArgs>(args: Prisma.SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserProfiles and returns the data updated in the database.
   * @param {UserProfileUpdateManyAndReturnArgs} args - Arguments to update many UserProfiles.
   * @example
   * // Update many UserProfiles
   * const userProfile = await prisma.userProfile.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserProfiles and only return the `id`
   * const userProfileWithIdOnly = await prisma.userProfile.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserProfileUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserProfile.
   * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
   * @example
   * // Update or create a UserProfile
   * const userProfile = await prisma.userProfile.upsert({
   *   create: {
   *     // ... data to create a UserProfile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserProfile we want to update
   *   }
   * })
   */
  upsert<T extends UserProfileUpsertArgs>(args: Prisma.SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma.Prisma__UserProfileClient<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserProfiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
   * @example
   * // Count the number of UserProfiles
   * const count = await prisma.userProfile.count({
   *   where: {
   *     // ... the filter for the UserProfiles we want to count
   *   }
   * })
  **/
  count<T extends UserProfileCountArgs>(
    args?: Prisma.Subset<T, UserProfileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserProfileAggregateArgs>(args: Prisma.Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

  /**
   * Group by UserProfile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProfileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserProfileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserProfileGroupByArgs['orderBy'] }
      : { orderBy?: UserProfileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserProfile model
 */
readonly fields: UserProfileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserProfile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserProfile model
 */
export interface UserProfileFieldRefs {
  readonly id: Prisma.FieldRef<"UserProfile", 'Int'>
  readonly year_level: Prisma.FieldRef<"UserProfile", 'String'>
  readonly gender: Prisma.FieldRef<"UserProfile", 'Gender'>
  readonly hobby_1: Prisma.FieldRef<"UserProfile", 'String'>
  readonly hobby_2: Prisma.FieldRef<"UserProfile", 'String'>
  readonly not_good: Prisma.FieldRef<"UserProfile", 'String'>
  readonly bio: Prisma.FieldRef<"UserProfile", 'String'>
  readonly userId: Prisma.FieldRef<"UserProfile", 'Int'>
}
    

// Custom InputTypes
/**
 * UserProfile findUnique
 */
export type UserProfileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * Filter, which UserProfile to fetch.
   */
  where: Prisma.UserProfileWhereUniqueInput
}

/**
 * UserProfile findUniqueOrThrow
 */
export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * Filter, which UserProfile to fetch.
   */
  where: Prisma.UserProfileWhereUniqueInput
}

/**
 * UserProfile findFirst
 */
export type UserProfileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * Filter, which UserProfile to fetch.
   */
  where?: Prisma.UserProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProfiles to fetch.
   */
  orderBy?: Prisma.UserProfileOrderByWithRelationInput | Prisma.UserProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserProfiles.
   */
  cursor?: Prisma.UserProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserProfiles.
   */
  distinct?: Prisma.UserProfileScalarFieldEnum | Prisma.UserProfileScalarFieldEnum[]
}

/**
 * UserProfile findFirstOrThrow
 */
export type UserProfileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * Filter, which UserProfile to fetch.
   */
  where?: Prisma.UserProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProfiles to fetch.
   */
  orderBy?: Prisma.UserProfileOrderByWithRelationInput | Prisma.UserProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserProfiles.
   */
  cursor?: Prisma.UserProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProfiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserProfiles.
   */
  distinct?: Prisma.UserProfileScalarFieldEnum | Prisma.UserProfileScalarFieldEnum[]
}

/**
 * UserProfile findMany
 */
export type UserProfileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * Filter, which UserProfiles to fetch.
   */
  where?: Prisma.UserProfileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProfiles to fetch.
   */
  orderBy?: Prisma.UserProfileOrderByWithRelationInput | Prisma.UserProfileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserProfiles.
   */
  cursor?: Prisma.UserProfileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProfiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProfiles.
   */
  skip?: number
  distinct?: Prisma.UserProfileScalarFieldEnum | Prisma.UserProfileScalarFieldEnum[]
}

/**
 * UserProfile create
 */
export type UserProfileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * The data needed to create a UserProfile.
   */
  data: Prisma.XOR<Prisma.UserProfileCreateInput, Prisma.UserProfileUncheckedCreateInput>
}

/**
 * UserProfile createMany
 */
export type UserProfileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserProfiles.
   */
  data: Prisma.UserProfileCreateManyInput | Prisma.UserProfileCreateManyInput[]
}

/**
 * UserProfile createManyAndReturn
 */
export type UserProfileCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * The data used to create many UserProfiles.
   */
  data: Prisma.UserProfileCreateManyInput | Prisma.UserProfileCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserProfile update
 */
export type UserProfileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * The data needed to update a UserProfile.
   */
  data: Prisma.XOR<Prisma.UserProfileUpdateInput, Prisma.UserProfileUncheckedUpdateInput>
  /**
   * Choose, which UserProfile to update.
   */
  where: Prisma.UserProfileWhereUniqueInput
}

/**
 * UserProfile updateMany
 */
export type UserProfileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserProfiles.
   */
  data: Prisma.XOR<Prisma.UserProfileUpdateManyMutationInput, Prisma.UserProfileUncheckedUpdateManyInput>
  /**
   * Filter which UserProfiles to update
   */
  where?: Prisma.UserProfileWhereInput
  /**
   * Limit how many UserProfiles to update.
   */
  limit?: number
}

/**
 * UserProfile updateManyAndReturn
 */
export type UserProfileUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * The data used to update UserProfiles.
   */
  data: Prisma.XOR<Prisma.UserProfileUpdateManyMutationInput, Prisma.UserProfileUncheckedUpdateManyInput>
  /**
   * Filter which UserProfiles to update
   */
  where?: Prisma.UserProfileWhereInput
  /**
   * Limit how many UserProfiles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserProfile upsert
 */
export type UserProfileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * The filter to search for the UserProfile to update in case it exists.
   */
  where: Prisma.UserProfileWhereUniqueInput
  /**
   * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
   */
  create: Prisma.XOR<Prisma.UserProfileCreateInput, Prisma.UserProfileUncheckedCreateInput>
  /**
   * In case the UserProfile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserProfileUpdateInput, Prisma.UserProfileUncheckedUpdateInput>
}

/**
 * UserProfile delete
 */
export type UserProfileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  /**
   * Filter which UserProfile to delete.
   */
  where: Prisma.UserProfileWhereUniqueInput
}

/**
 * UserProfile deleteMany
 */
export type UserProfileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserProfiles to delete
   */
  where?: Prisma.UserProfileWhereInput
  /**
   * Limit how many UserProfiles to delete.
   */
  limit?: number
}

/**
 * UserProfile without action
 */
export type UserProfileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
}
